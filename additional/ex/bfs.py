# Алгоритм BFS
# Стандартная реализация ВFS помещает каждую вершину графа в одну из двух категорий:
# Посещенные.
# Не посещенные.
# Цель алгоритма - пометить каждую вершину, как посещенную, избегая циклов.
# Алгоритм работает следующим образом:
# 1 - Начните с размещения любой вершины графа в конце очереди.
# 2 - Возьмите передний элемент очереди и добавьте его в список посещенных.
# 3 - Создайте список смежных узлов этой вершины. Добавьте те, которых нет в списке посещенных, в конец очереди.
# 4 - Продолжайте повторять шаги 2 и 3, пока очередь не опустеет.
# Граф может иметь две разные несвязанные части,
# поэтому, чтобы убедиться, что мы покрываем каждую вершину, мы также можем запустить алгоритм BFS на каждом узле


adj = [
# список смежности
    [1, 3],  # 0
    [0, 3, 4, 5],  # 1
    [4, 5],  # 2
    [0, 1, 5],  # 3
    [1, 2],  # 4
    [1, 2, 3]  # 5
]

# список уровней вершин
level = [-1] * len(adj)

def bfs(s):
    # уровень начальной вершины
    global level
    level[s] = 0
    # добавляем начальную вершину в очередь
    queue = [s]
    # пока там что-то есть
    while queue:
        # извлекаем вершину
        v = queue.pop(0)
        # запускаем обход из вершины v
        for w in adj[v]:
            # проверка на посещенность
            if level[w] == -1:
                # добавление вершины в очередь
                queue.append(w)
                # подсчитываем уровень вершины
                level[w] = level[v] + 1

for i in range(len(adj)):
    # на случай, если имеется несколько компонент связности
    if level[i] == -1:
        bfs(i)

# уровень вершины 2
print(level[2])
